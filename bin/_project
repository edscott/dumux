#!/usr/bin/env bash

#
# TODO:
#
# * Check module names entered as dependencies.

set -e
#
# FIND Dune modules
# (XXX search for modules in each directory in DUNE_CONTROL_PATH)
#
find_dune_modules() {
  setup_control_path
  if test -z "$FOUND_MODULES"; then
      dir="/opt/dune/lib/dunecontrol"
        while read m; do
          test -n "$m" && parse_control "$m"
        done <<EOFM
        $(find -H "$dir" -name $CONTROL | $GREP -v 'dune-[-_a-zA-Z]/dune-[-a-zA-Z_]*-[0-9]\{1,\}.[0-9]\{1,\}/')
EOFM
<<EOF
    $(echo $DUNE_CONTROL_PATH | sed -e 's/:\+/:/g' | tr ':' '\n') 
EOF
    export MODULES="$LOCALMODULES$INSTMODULES"
    export FOUND_MODULES="$MODULES"
  else
    export MODULES="$FOUND_MODULES"
  fi
}

canonicalname(){
	if test $# -ne 1; then
		echo Usage: canonicalname path >&2
		return 1
	fi
	file="`eval echo $1`" # expand ~
	if test ! -e "$file"; then
		echo $file: file not found >&2
		return 1
	fi
    # if this is a symlink, then follow the symlink
	if test -L "$file"; then
		fdir="`dirname \"$file\"`"
		flink="`readlink \"$file\"`"
		if test -e "$flink"; then
			# these are absolute links, or links in the CWD
			canonicalname "$flink"
		else
			canonicalname "$fdir/$flink"
		fi
	else
        # if this is a file, then remember the filename and
        # canonicalize the directory name
		if test -f "$file"; then
			fdir="`dirname \"$file\"`"
			fname="`basename \"$file\"`"
			fdir="`canonicalname \"$fdir\"`"
			echo "$fdir/$fname"
		fi
        # if this is a directory, then create an absolute
        # directory name and we are done
		if test -d "$file"; then
			(cd "$file"; pwd)
		fi
	fi
}

canonicalpath(){
  if test $# -ne 1; then
     echo Usage: canonicalpath path >&2
     return 1
  fi
  dirname "$(canonicalname "$1")"
}

pkg_config_dependencies(){
    if test $# -ne 1; then
	echo Usage: pkg_config_dependencies name >&2
	return 1
    fi
    name="$1"
    depends="`pkg-config --variable=DEPENDENCIES $name| sed -e 's/,/ /g'`"
    for pkg in $depends; do
	depends="$depends `pkg_config_dependencies $pkg`"
    done
    echo $depends
}

modulesexist(){
  allfound=0

  for dep in $1; do
      found=0
      for module in $2; do
	  if [ "$dep" = "$module" ]; then
	      found=1
	      break
	  fi
      done
      if [ "$found" = "0" ]; then
          # Module not found in list, try pkg-config
          pkg-config $module &> /dev/null
          found=$?
      fi
      if [ "$found" = "0" ]; then
	  echo "ERROR:">&2
	  echo "Module with name $dep was not found" >&2
	  echo "Did you forget to specify it's location" >&2
	  echo "in the DUNE_CONTROL_PATH variable?">&2
	  echo >&2
	  allfound=1
      fi
  done
  return $allfound
}

make_unique(){
  if [ "$#" = "1" ]; then
      # take first word
      for exclude_word in $1; do
	  break;
      done
      make_unique $exclude_word "$1" 0
  else
      local exclude_word="$1"
      local words="$2"
      local pos="$3"
      local length=0
      local i=0
      local new_words=""
      local cur=0
      for word in $words; do
	  if [ $i -le $pos ]; then
	      i=$((i+1))
	      length=$((length+1))
	      new_words="$new_words $word"
	      continue
	  fi
	  if [ "$word" != "$exclude_word" ]; then
	      new_words="$new_words $word"
	      if [ "$((length-1))" = "$pos" ]; then
		  next_word="$word"
	      fi
	      length=$((length+1))
	  fi
      done
      if [ "$pos" -lt "$length" ]; then
       # process next word
	  make_unique "$next_word" "$new_words" $((pos+1))
      else
	  export UNIQUE_WORDS="$new_words"
      fi
  fi
}

BRED="\033[01;31m";
YELLOW="\033[0;33m";
BOLD="\033[0;01m";
NORMAL="\033[0m";
echo -e "$YELLOW"
printenv

echo
echo == Project generator ==
echo
echo During this process all configuration and Makefiles will be
echo created for the use of Dune/DuMux modules installed in /opt/dune.
echo
if [ "$SRC_DIR" = "" ]; then
    echo "SRC_DIR environment variable not defined!"
    exit
else
    echo "SRC_DIR=$SRC_DIR"
fi
if [ "$SRC_FILE" = "" ]; then
    echo "SRC_FILE environment variable not defined!"
    exit
else
    echo "SRC_FILE=$SRC_FILE"
fi


if [ "$PROJECTS" = "" ]; then
    echo "PROJECTS environment variable not defined!"
    exit
fi

if [[ $PATH != *"/opt/dune/bin"* ]]; then
  export PATH="/opt/dune/bin":$PATH
  echo "setting PATH to $PATH"
fi

################## FIND DUNE MODULES ##################

. "/opt/dune/lib/dunemodules.lib"

export PREFIX_DIR="/opt/dune"
echo "PREFIX_DIR = $PREFIX_DIR"


extract_multiarch_pkg_config_path

# search for modules, both installed and src modules
find_dune_modules
# sort modules to remove duplicates
sort_modules $FOUND_MODULES
FOUND_MODULES=$MODULES

# get the real module names
MODULES=""
for i in $FOUND_MODULES; do
  mod=$(eval echo \$NAME_$i)
  MODULES="$MODULES$mod "
done

if [ "$MODULES" = "" ]; then
  echo "ERROR:">&2
  echo "  No dune modules were found!">&2
  echo "  Did you forget to specify the places where ">&2
  echo "  you installed your modules in the ">&2
  echo "  DUNE_CONTROL_PATH environment variable">&2
  echo "  and adjusted the PKG_CONFIG_PATH environment">&2
  echo "  accordingly?" >&2
  exit 1;
fi


################## READ CMDLINE OPTIONS ##########
PROJECT="$1"
if [ "$2" = "all" ]; then 
 DEPENDENCIES=$MODULES
else 
 DEPENDENCIES="$2"
fi
if [ "$3" = "" ]; then
 VERSION="1.0"
else
 VERSION="$3"
fi
if [ "$4" = "" ]; then
 WHOAMI=`whoami`
 HOST=`hostname`
 MAINTAINER="$WHOAMI@$HOST"
else
 MAINTAINER="$4"
fi
ENABLE_ALL="y"
#ENABLE_ALL="$5"

################## READ OPTIONS ##################


while [ "$DATACORRECT" != "y" -a "$DATACORRECT" != "Y" ]; do

  # Track minimum CMake version
  CMAKE_MINIMUM_REQUIRED=2.8.12

  while [ -z $PROJECT ]; do
    read -p "1) Name of your new Project? (e.g.: dune-grid): " PROJECT
    if echo "$MODULES" | grep -q ^$PROJECT$; then
      read -p "   A module named $PROJECT already exists. Continue anyway? [y/N] " CONT
      if test x$DELETE = xy -o x$DELETE = xY; then
        PROJECT=""
      fi
    elif echo "$PROJECT" | grep -q "\."; then
      echo "The Name contains a dot (.) which is not allowed."
      PROJECT=""
    fi
  done
  MODULE="$PROJECT"
  echo "PROJECT = $PROJECT"

  DEPOK=1

  while [ "$DEPOK" != 0 ]; do
  echo "2) Which modules should this module depend on?"
  echo "   The following modules have been found:"
  echo "   $MODULES"
#  for i in $MODULES; do echo -n " $i"; done
#  echo ""
  while [ -z "$DEPENDENCIES" ]; do
      read -p "   Enter space-separated list: " DEPENDENCIES
  done
  set +e
  modulesexist "$DEPENDENCIES" "$MODULES"
  DEPOK=$?
  set -e
  if [ "$DEPOK" != 0 ]; then
    DEPENDENCIES=""
  fi
  done
  echo "DEPENDENCIES = $DEPENDENCIES"

  while [ -z $VERSION ]; do
    read -p "3) Project/Module version? " VERSION
  done
  echo "VERSION = $VERSION"
  while [ -z "$MAINTAINER" ]; do
    read -p "4) Maintainer's email address? " MAINTAINER
  done
  echo "MAINTAINER = $MAINTAINER"
  while [ "$ENABLE_ALL" != "y" -a "$ENABLE_ALL" != "Y" -a "$ENABLE_ALL" != "n" -a "$ENABLE_ALL" != "N" ]; do
    echo "5) Enable all available packages? Choose 'y' if you don't understand the question, but note that you need"
    read -p "   at least CMake 2.8.12 for this. You can check your version with 'cmake --version' [y/N]" ENABLE_ALL
  done

  # canonicalize contents of ENABLE_ALL
  ENABLE_ALL=$(tr '[:upper:]' '[:lower:]' <<< "$ENABLE_ALL")
  echo "ENABLE_ALL = $ENABLE_ALL"

  # set newer CMake minimum version if ENABLE_ALL is true
  if [ 'y' == "$ENABLE_ALL" ] ; then
    CMAKE_MINIMUM_REQUIRED=2.8.12
  fi

  echo
  echo "**********  creating Project \"$PROJECT\", version $VERSION  ****************"
  echo "which depends on \"$DEPENDENCIES\""
  echo "with maintainer \"$MAINTAINER\""
  if [ "y" == "$ENABLE_ALL" ] ; then
    echo "and new, automatic external package handling based on dune_enable_all_packages()."
  else
    echo "and old external package handling (you need to manually add external dependencies to each target in CMakeLists.txt)."
  fi
  echo "Minimum required CMake version for building this project: ${CMAKE_MINIMUM_REQUIRED}"
  echo
#  if test x$DEFAULTS == xyes ; then
#    echo "Are these informations correct? [y/N] Y"
#    DATACORRECT="Y"
#  else
#    read -p "Are these informations correct? [y/N] " DATACORRECT
#  fi

  DATACORRECT="Y"
  # reset data if necessary
  if [ "$DATACORRECT" != "y" -a "$DATACORRECT" != "Y" ]; then
    PROJECT=""
    DEPENDENCIES=""
    VERSION=""
    MAINTAINER=""
    ENABLE_ALL=""
  fi
  done



echo
#echo "A sample code $SRC_FILE.cc is generated in the \"$PROJECT\" directory."
echo "Source code has been linked in the \"$PROJECT\" directory."
echo "Look at the README and dune.module files there."
echo "Now you can run the dunecontrol script which will setup the new module."
echo "Sometimes you may have to tweak CMakeLists.txt a bit."


#OVERWRITE=yes
if test -d $PROJECTS/$PROJECT; then
  echo -e "$BRED*** WARNING:"
  echo "A directory with the name $PROJECTS/$PROJECT already exists."
  echo -e "Do you want to continue anyway?$BOLD"
  if test x$OVERWRITE == xyes ; then
    echo "Type Y to overwrite the old directory, N to abort. [Y/n] Y" 
    DELETE="Y"
  else
    read -p "Type Y to overwrite the old directory, N to use old files. [Y/n] " DELETE
  fi
  if test x$DELETE != xn -a x$DELETE != xN; then
    echo -e "$BRED Removing old files...$NORMAL"
  else
    echo -e "$BRED Abort...$NORMAL"
    exit 1
  fi
  echo -e "$YELLOW"
  rm -rf "$PROJECTS/$PROJECT"
fi
mkdir -p "$PROJECTS/$PROJECT"

################## dune.module ##################
cat > "$PROJECTS/$PROJECT/dune.module" <<C_DELIM
################################
# Dune module information file #
################################

#Name of the module
Module: $MODULE
Version: $VERSION
Maintainer: $MAINTAINER
#depending on
Depends: $DEPENDENCIES
C_DELIM

## Create the parameters passed to DUNE_CHECK_ALL

# save module list of dunemodules.inc
save_MODULES=$MODULES
for name in $DEPENDENCIES; do
  mod="`fix_variable_name $name`"
  if test "x$(eval echo \$HAVE_$mod)" != "x"; then
    # found via dunemodules.inc
    sort_modules "$mod"
    for mod in $MODULES; do
      M_DEPS="$M_DEPS $(eval echo \$NAME_$mod)"
    done
    MODULES=$save_MODULES
  else
    # found via pkg-config
    M_DEPS="`pkg_config_dependencies $name` $name"
  fi
  for dep in $M_DEPS; do
      CHECK="$CHECK [$dep]"
  done
done
set +x
make_unique "$CHECK"

# insert , between modules
j=0
for dep in $UNIQUE_WORDS; do
if [ "$j" = "0" ]; then
      CHECK="$dep"
      j=1
    else
      CHECK="$CHECK, $dep"
    fi
done

echo "------------------------------------------"
echo "writing initial files:"

# complete module name with _ instead of - to not confuse automake
fix_and_assign CMODULE $MODULE
# module name without prefix "dune-"
NAME=`echo $PROJECT | sed -e 's/dune[_-]//'`
# $NAME with _ instead of - to not confuse automake
NAME_=`echo $NAME | tr '-' '_'`
# module name in uppercase with _ instead of -
UNAME=`echo $PROJECT | tr '-' '_' | sed 's/\(.*\)/\U\1/'`

################## README ##################
echo "- $PROJECTS/$PROJECT/README"
cat > "$PROJECTS/$PROJECT/README" <<R_DELIM
Preparing the Sources
=========================

Additional to the software mentioned in README you'll need the
following programs installed on your system:

  cmake >= ${CMAKE_MINIMUM_REQUIRED}

Getting started
---------------

If these preliminaries are met, you should run

  dunecontrol all

which will find all installed dune modules as well as all dune modules
(not installed) which sources reside in a subdirectory of the current
directory. Note that if dune is not installed properly you will either
have to add the directory where the dunecontrol script resides (probably
./dune-common/bin) to your path or specify the relative path of the script.

Most probably you'll have to provide additional information to dunecontrol
(e. g. compilers, configure options) and/or make options.

The most convenient way is to use options files in this case. The files
define four variables:

CMAKE_FLAGS      flags passed to cmake (during configure)
MAKE_FLAGS       flags passed to make

An example options file might look like this:

#use this options to configure and make if no other options are given
CMAKE_FLAGS=" \\
-DCMAKE_CXX_COMPILER=g++-4.9 \\
-DCMAKE_CXX_FLAGS='-Wall -pedantic' \\
-DCMAKE_INSTALL_PREFIX=/install/path" #Force g++-4.9 and set compiler flags
MAKE_FLAGS=install #Per default run make install instead of simply make

If you save this information into example.opts you can pass the opts file to
dunecontrol via the --opts option, e. g.

  dunecontrol --opts=example.opts all

More info
---------

See

     dunecontrol --help

for further options.


The full build system is described in the dune-common/doc/buildsystem (Git version) or under share/doc/dune-common/buildsystem if you installed DUNE!
R_DELIM

################## CMakeLists.txt ##################
echo "- $PROJECTS/$PROJECT/CMakeLists.txt"
cat> "$PROJECTS/$PROJECT/CMakeLists.txt" << M_DELIM
cmake_minimum_required(VERSION ${CMAKE_MINIMUM_REQUIRED})
project($PROJECT CXX)

if(NOT (dune-common_DIR OR dune-common_ROOT OR
      "\${CMAKE_PREFIX_PATH}" MATCHES ".*dune-common.*"))
    string(REPLACE  \${CMAKE_PROJECT_NAME} dune-common dune-common_DIR
      \${PROJECT_BINARY_DIR})
endif()

#find dune-common and set the module path
find_package(dune-common REQUIRED)
list(APPEND CMAKE_MODULE_PATH "\${PROJECT_SOURCE_DIR}/cmake/modules"
  \${dune-common_MODULE_PATH})

#include the dune macros
include(DuneMacros)

# start a dune project with information from dune.module
dune_project()
M_DELIM
if [ 'y' == "$ENABLE_ALL" ] ; then
cat>> "$PROJECTS/$PROJECT/CMakeLists.txt" << M_DELIM
dune_enable_all_packages()
M_DELIM
fi
cat>> "$PROJECTS/$PROJECT/CMakeLists.txt" << M_DELIM
set(CMAKE_CXX_FLAGS "-I$SRC_DIR -I$LOCAL_INCLUDE -I$PWD $CXXFLAGS")
set(CMAKE_CXX_FLAGS_DEBUG "-I$SRC_DIR -I$LOCAL_INCLUDE -I$PWD $CXXFLAGS")
set(CMAKE_CXX_FLAGS_RELEASE "-I$SRC_DIR -I$LOCAL_INCLUDE -I$PWD $CXXFLAGS")
add_subdirectory("src")
add_subdirectory("dune")
add_subdirectory("doc")
add_subdirectory("cmake/modules")

# finalize the dune project, e.g. generating config.h etc.
finalize_dune_project(GENERATE_CONFIG_H_CMAKE)
M_DELIM

################## PROJECT.PC.IN ##################
echo "- $PROJECTS/$PROJECT/$MODULE.pc.in"
cat> "$PROJECTS/$PROJECT/$MODULE.pc.in" << CC_DELIM
prefix=@prefix@
exec_prefix=@exec_prefix@
libdir=@libdir@
includedir=@includedir@
CXX=@CXX@
CC=@CC@
DEPENDENCIES=@REQUIRES@

Name: @PACKAGE_NAME@
Version: @VERSION@
Description: $MODULE module
URL: http://dune-project.org/
Requires: ${DEPENDENCIES}
Libs: -L\${libdir}
Cflags: -I\${includedir}
CC_DELIM
echo "    Please remember to update your $PROJECTS/$PROJECT/$MODULE.pc.in,"
echo "    Description and URL are missing right now."

################# config.h.cmake #####################

echo "- $PROJECTS/$PROJECT/config.h.cmake"
cat> "$PROJECTS/$PROJECT/config.h.cmake" <<EOF
/* begin $PROJECTS/$PROJECT
   put the definitions for config.h specific to
   your project here. Everything above will be
   overwritten
*/

/* begin private */
/* Name of package */
#define PACKAGE "@DUNE_MOD_NAME@"

/* Define to the address where bug reports for this package should be sent. */
#define PACKAGE_BUGREPORT "@DUNE_MAINTAINER@"

/* Define to the full name of this package. */
#define PACKAGE_NAME "@DUNE_MOD_NAME@"

/* Define to the full name and version of this package. */
#define PACKAGE_STRING "@DUNE_MOD_NAME@ @DUNE_MOD_VERSION@"

/* Define to the one symbol short name of this package. */
#define PACKAGE_TARNAME "@DUNE_MOD_NAME@"

/* Define to the home page for this package. */
#define PACKAGE_URL "@DUNE_MOD_URL@"

/* Define to the version of this package. */
#define PACKAGE_VERSION "@DUNE_MOD_VERSION@"

/* end private */

/* Define to the version of $PROJECT */
#define ${UNAME}_VERSION "@${UNAME}_VERSION@"

/* Define to the major version of $PROJECT */
#define ${UNAME}_VERSION_MAJOR @${UNAME}_VERSION_MAJOR@

/* Define to the minor version of $PROJECT */
#define ${UNAME}_VERSION_MINOR @${UNAME}_VERSION_MINOR@

/* Define to the revision of $PROJECT */
#define ${UNAME}_VERSION_REVISION @${UNAME}_VERSION_REVISION@

/* end $PROJECT
   Everything below here will be overwritten
*/
EOF
## done

###############################################################
################## The source subdirectory ####################
###############################################################

mkdir "$PROJECTS/$PROJECT/src"

################## src/CMakeLists.txt ##################

echo "- $PROJECTS/$PROJECT/src/CMakeLists.txt"
cat> "$PROJECTS/$PROJECT/src/CMakeLists.txt" << M_DELIM
add_executable("${SRC_FILE}" ${SRC_FILE}.cc)
target_link_dune_default_libraries("${SRC_FILE}")
M_DELIM

################## PROJECT.CC ##################
echo "ln -s $SRC_DIR/$SRC_FILE.cc $PROJECTS/$PROJECT/src/$SRC_FILE.cc"
ln -s "$SRC_DIR/$SRC_FILE.cc" "$PROJECTS/$PROJECT/src/$SRC_FILE.cc"
TARGETS=`ls $SRC_DIR/*.input`
for target in $TARGETS ; do
    destination=${target##*/}
#    echo "ln -s $target $PROJECTS/$PROJECT/src/$destination"
    ln -s "$target" "$PROJECTS/$PROJECT/src/$destination"
done
################################################################
################## The headers subdirectory ####################
################################################################

echo "- $PROJECTS/$PROJECT/dune/$NAME"
mkdir "$PROJECTS/$PROJECT/dune"
mkdir "$PROJECTS/$PROJECT/dune/$NAME"

################## dune/CMakeLists.txt #################
echo "- $PROJECTS/$PROJECT/dune/CMakeLists.txt"
cat> $PROJECTS/$PROJECT/dune/CMakeLists.txt <<EOF
add_subdirectory($NAME)
EOF

################## dune/$NAME/CMakeLists.txt ###########
echo "- $PROJECTS/$PROJECT/dune/$NAME/CMakeLists.txt"
cat> $PROJECTS/$PROJECT/dune/$NAME/CMakeLists.txt <<EOF
#install headers
install(FILES ${NAME}.hh DESTINATION \${CMAKE_INSTALL_INCLUDEDIR}/dune/$NAME)
EOF

################## dune/$NAME/$NAME.hh #################
echo "- $PROJECTS/$PROJECT/dune/$NAME/$NAME.hh"
cat> $PROJECTS/$PROJECT/dune/$NAME/$NAME.hh <<EOF
#ifndef ${UNAME}_HH
#define ${UNAME}_HH

// add your classes here

#endif // ${UNAME}_HH
EOF


###############################################################
################## The doc subdirectory #######################
###############################################################

mkdir "$PROJECTS/$PROJECT/doc"

################## doc/CMakeLists.txt #################
echo "- $PROJECTS/$PROJECT/doc/CMakeLists.txt"
cat> "$PROJECTS/$PROJECT/doc/CMakeLists.txt" << CC_DELIM
add_subdirectory("doxygen")
CC_DELIM

###############################################################
############### The doc/doxygen subdirectory ##################
###############################################################

mkdir "$PROJECTS/$PROJECT/doc/doxygen"

#################### basic Doxylocal ##########################

echo "- $PROJECTS/$PROJECT/doc/doxygen/Doxylocal"
if [ "x`which doxygen`" == "x" ]; then
    echo "Doxygen is not installed! Your documentation will not work without."
fi
# Where to search and which files to use
cat> $PROJECTS/$PROJECT/doc/doxygen/Doxylocal << CC_DELIM
# This file contains local changes to the doxygen configuration
# please us '+=' to add file/directories to the lists

# The INPUT tag can be used to specify the files and/or directories that contain
# documented source files. You may enter file names like "myfile.cpp" or
# directories like "/usr/src/myproject". Separate the files or directories
# with spaces.

INPUT                 += @top_srcdir@/dune/
# see e.g. dune-grid for the examples of mainpage and modules
# INPUT                 += @srcdir@/mainpage \\
#                          @srcdir@/modules

# The EXCLUDE tag can be used to specify files and/or directories that should
# excluded from the INPUT source files. This way you can easily exclude a
# subdirectory from a directory tree whose root is specified with the INPUT tag.

# EXCLUDE               += @top_srcdir@/dune/$NAME/test

# The EXAMPLE_PATH tag can be used to specify one or more files or
# directories that contain example code fragments that are included (see
# the \include command).

# EXAMPLE_PATH          += @top_srcdir@/src

# The IMAGE_PATH tag can be used to specify one or more files or
# directories that contain image that are included in the documentation (see
# the \image command).

# IMAGE_PATH            += @top_srcdir@/dune/$NAME/pics
CC_DELIM

################# doc/doxygen/CMakeLists.txt #####################

echo "- $PROJECTS/$PROJECT/doc/doxygen/CMakeLists.txt"
cat> "$PROJECTS/$PROJECT/doc/doxygen/CMakeLists.txt" << CC_DELIM
# shortcut for creating the Doxyfile.in and Doxyfile
add_doxygen_target()
CC_DELIM

#########################################################
############### The cmake subdirectory ##################
#########################################################

mkdir "$PROJECTS/$PROJECT/cmake"

#########################################################
############### The cmake/modules subdirectory ##########
#########################################################

mkdir "$PROJECTS/$PROJECT/cmake/modules"

macroname=""
for i in $(echo $PROJECT| sed 's/-/ /g'); do
  firstchar=$(echo $i | sed 's/\(.\).*/\1/')
  macroname=$macroname$(echo $firstchar | tr '[a-z]' '[A-Z]')$(echo $i | sed 's/.\(.*\)/\1/')
done
macroname="$macroname""Macros.cmake"

################# cmake/modules/CMakeLists.txt #####################

echo "- $PROJECTS/$PROJECT/cmake/modules/CMakeLists.txt"
cat> "$PROJECTS/$PROJECT/cmake/modules/CMakeLists.txt" <<EOF
set(modules "$macroname")

install(FILES \${modules} DESTINATION \${DUNE_INSTALL_MODULEDIR})
EOF

################# cmake/modules/$macroname #####################

echo "- $PROJECTS/$PROJECT/cmake/modules/$macroname"
cat> "$PROJECTS/$PROJECT/cmake/modules/$macroname" <<EOF
# File for module specific CMake tests.
EOF


#################           done           #####################

echo
echo "done."
echo "------------------------------------------"
echo "For further details read the Dune build system documentation at"
echo "https://www.dune-project.org/buildsystem/"


